{
  "openapi": "3.0.1",
  "info": {
    "title": "COU Direct Connectivity",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://sandbox-coudc.setu.co/api/v1",
      "description": "Sandbox server"
    }
  ],
  "paths": {
    "/auth/token": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Token Request",
        "operationId": "fetchToken",
        "requestBody": {
          "description": "The API key pair",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/fetchTokenRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Auth token response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fetchTokenResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/genericErrorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "fetchTokenPayload"
      }
    },
    "/bbps/autofetches": {
      "get": {
        "tags": [
          "autofetch"
        ],
        "summary": "List",
        "operationId": "listAutofetchSubscriptions",
        "parameters": [
          {
            "name": "X-PARTNER-ID",
            "in": "header",
            "description": "Partner Id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/listAutofetchSubscriptionsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/genericErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bbps": [
              "bbps:partner"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "autofetch"
        ],
        "summary": "Bulk subscriptions",
        "operationId": "bulkAutofetchSubscriptions",
        "parameters": [
          {
            "name": "X-PARTNER-ID",
            "in": "header",
            "description": "Partner Id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/autofetchSubscriptionBulk"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/autofetchBulkResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/genericErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bbps": [
              "bbps:partner"
            ]
          }
        ],
        "x-codegen-request-body-name": "AutofetchSubscriptionsBulk"
      }
    },
    "/bbps/autofetches/{autofetchHash}": {
      "delete": {
        "tags": [
          "autofetch"
        ],
        "summary": "Disable",
        "operationId": "disableAutofetch",
        "parameters": [
          {
            "name": "X-PARTNER-ID",
            "in": "header",
            "description": "Partner Id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "autofetchHash",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/disableAutofetchResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bbps": [
              "bbps:partner"
            ]
          }
        ]
      }
    },
    "/bbps/billers": {
      "get": {
        "tags": [
          "List"
        ],
        "summary": "Billers",
        "operationId": "getBillers",
        "parameters": [
          {
            "name": "X-PARTNER-ID",
            "in": "header",
            "description": "Partner ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "categoryName",
            "in": "query",
            "description": "Category of the biller",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "ids",
            "in": "query",
            "description": "Billers to search",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "after",
            "in": "query",
            "description": "Billers are sorted via the Biller ID. Providing a biller Id fetches billers right after this biller in a paginated way.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Searches the provided text over Biller name and Biller Alias",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of billers",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/billerListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/genericErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/genericErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bbps": [
              "bbps:partner"
            ]
          }
        ]
      }
    },
    "/bbps/bills/complaint/request": {
      "post": {
        "tags": [
          "Dispute"
        ],
        "summary": "Request",
        "operationId": "DisputeRequest",
        "parameters": [
          {
            "name": "X-PARTNER-ID",
            "in": "header",
            "description": "Partner ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/couAgentDisputeRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/genericRefIdResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/genericErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/genericErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bbps": [
              "bbps:partner"
            ]
          }
        ],
        "x-codegen-request-body-name": "CouAgentDisputeRequest"
      }
    },
    "/bbps/bills/complaint/response": {
      "post": {
        "tags": [
          "Dispute"
        ],
        "summary": "Response",
        "operationId": "DisputeResponse",
        "parameters": [
          {
            "name": "X-PARTNER-ID",
            "in": "header",
            "description": "Partner ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/refIdBasedRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/couAgentDisputeResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/genericErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/genericErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bbps": [
              "bbps:partner"
            ]
          }
        ],
        "x-codegen-request-body-name": "CouAgentAsyncRequest"
      }
    },
    "/bbps/bills/fetch/request": {
      "post": {
        "tags": [
          "Fetch"
        ],
        "summary": "Request",
        "operationId": "FetchRequest",
        "parameters": [
          {
            "name": "X-PARTNER-ID",
            "in": "header",
            "description": "Partner ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/couAgentBillFetchRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/genericRefIdResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/genericErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/genericErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bbps": [
              "bbps:partner"
            ]
          }
        ],
        "x-codegen-request-body-name": "CouAgentBillFetchRequest"
      }
    },
    "/bbps/bills/fetch/response": {
      "post": {
        "tags": [
          "Fetch"
        ],
        "summary": "Response",
        "operationId": "FetchResponse",
        "parameters": [
          {
            "name": "X-PARTNER-ID",
            "in": "header",
            "description": "Partner ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/refIdBasedRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/couAgentBillFetchResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/genericErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/genericErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bbps": [
              "bbps:partner"
            ]
          }
        ],
        "x-codegen-request-body-name": "CouAgentAsyncRequest"
      }
    },
    "/bbps/bills/payment/request": {
      "post": {
        "tags": [
          "Pay"
        ],
        "summary": "Request",
        "operationId": "PaymentRequest",
        "parameters": [
          {
            "name": "X-PARTNER-ID",
            "in": "header",
            "description": "Partner ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/couAgentBillPaymentRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/genericRefIdResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/genericErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/genericErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bbps": [
              "bbps:partner"
            ]
          }
        ],
        "x-codegen-request-body-name": "CouAgentBillPaymentRequest"
      }
    },
    "/bbps/bills/payment/response": {
      "post": {
        "tags": [
          "Pay"
        ],
        "summary": "Response",
        "operationId": "PaymentResponse",
        "parameters": [
          {
            "name": "X-PARTNER-ID",
            "in": "header",
            "description": "Partner ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/refIdBasedRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/couAgentBillPaymentResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/genericErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/genericErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bbps": [
              "bbps:partner"
            ]
          }
        ],
        "x-codegen-request-body-name": "CouAgentAsyncRequest"
      }
    },
    "/bbps/categories": {
      "get": {
        "tags": [
          "List"
        ],
        "summary": "Categories",
        "operationId": "getCategories",
        "parameters": [
          {
            "name": "X-PARTNER-ID",
            "in": "header",
            "description": "Partner ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of categories",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/categoriesListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/genericErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/genericErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bbps": [
              "bbps:partner"
            ]
          }
        ]
      }
    },
    "/bbps/disputes": {
      "get": {
        "tags": [
          "List"
        ],
        "summary": "Disputes",
        "operationId": "getDisputes",
        "parameters": [
          {
            "name": "X-PARTNER-ID",
            "in": "header",
            "description": "Partner ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "status",
            "in": "query",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "after",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of disputes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/disputeListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/genericErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/genericErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bbps": [
              "bbps:partner"
            ]
          }
        ]
      }
    },
    "/bbps/fetched-bills": {
      "get": {
        "tags": [
          "List"
        ],
        "summary": "Fetched bills",
        "operationId": "getFetchedBills",
        "parameters": [
          {
            "name": "X-PARTNER-ID",
            "in": "header",
            "description": "Partner ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "autoFetchHash",
            "in": "query",
            "description": "Autofetch hash if present",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "after",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of fetched bills",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fetchedBillsListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/genericErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/genericErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bbps": [
              "bbps:partner"
            ]
          }
        ]
      }
    },
    "/bbps/transactions": {
      "get": {
        "tags": [
          "List"
        ],
        "summary": "Transactions",
        "operationId": "getTxns",
        "parameters": [
          {
            "name": "X-PARTNER-ID",
            "in": "header",
            "description": "Partner ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "after",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "full-date notation as defined by RFC 3339, section 5.6, for example, 2017-07-21",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "full-date notation as defined by RFC 3339, section 5.6, for example, 2017-07-21",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "billerId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of Txns",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/transactionsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/genericErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/genericErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bbps": [
              "bbps:partner"
            ]
          }
        ]
      }
    },
    "/health": {
      "get": {
        "tags": [
          "Health"
        ],
        "summary": "Health check",
        "operationId": "getHealth",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/healthResponseParam"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "additionalInfoLineItem": {
        "required": [
          "name",
          "value"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Line item 1"
          },
          "value": {
            "type": "string",
            "example": "Value 1"
          }
        }
      },
      "agentDetails": {
        "required": [
          "channel",
          "id"
        ],
        "type": "object",
        "properties": {
          "app": {
            "type": "string",
            "description": "Mandatory if channel is `MOB`, `MOBB`. Not required for others.",
            "example": "SmartPay"
          },
          "channel": {
            "type": "string",
            "description": "This is the initiating channel.\n1. `AGT`: Offline agent.\n2. `BNKBRNCH`: Bank branch.\n3. `BSC`: Business correspondent\n4. `MOB`: Mobile application\n5. `INT`: Internet portal\n6. `INTB`: Internet banking\n7. `MOBB`: Mobile banking\n8. `ATM`: ATM\n9. `KIOSK`: KIOSK\n",
            "example": "INT",
            "enum": [
              "INT",
              "INTB",
              "MOB",
              "BNKBRNCH",
              "BSC",
              "AGT",
              "KIOSK",
              "ATM",
              "MOBB"
            ]
          },
          "geocode": {
            "type": "string",
            "description": "Mandatory if channel is `AGT`, `BSC` and `BNKBRNCH`. Not required for others. This has to match the data submitted to NPCI for this agent ID\n",
            "example": "19.0139,72.8254"
          },
          "id": {
            "type": "string",
            "description": "The ID of the agent initiating the BBPS transaction.",
            "example": "AX01AI06512391457204"
          },
          "ifsc": {
            "type": "string",
            "description": "Mandatory if channel is `BNKBRNCH`. Not required for others. This has to match the data submitted to NPCI for this agent ID\n",
            "example": "ICIC0000152"
          },
          "imei": {
            "type": "string",
            "description": "Mandatory if channel is `MOB`, `MOBB`. Not required for others.",
            "example": "123456789012345"
          },
          "ip": {
            "type": "string",
            "description": "Mandatory if channel is `INT`, `INTB`. Not required for others.",
            "example": "124.170.23.24"
          },
          "mac": {
            "type": "string",
            "description": "Mandatory if channel is `INT`, `INTB`. Not required for others.",
            "example": "48-4D-7E-CB-DB-6F"
          },
          "mobile": {
            "type": "string",
            "description": "Mandatory if channel is `AGT`, `BSC` and `BNKBRNCH`. Not required for others. This has to match the data submitted to NPCI for this agent ID\n",
            "example": "9481773011"
          },
          "os": {
            "type": "string",
            "description": "Mandatory if channel is `MOB`, `MOBB`. Not required for others.",
            "example": "iOS",
            "enum": [
              "iOS",
              "Android"
            ]
          },
          "postalCode": {
            "type": "string",
            "description": "Mandatory if channel is  `AGT`, `BSC` and `BNKBRNCH`. Not required for others. This has to match the data submitted to NPCI for this agent ID\n",
            "example": "600001"
          },
          "terminalId": {
            "type": "string",
            "description": "Mandatory if channel is `ATM`, `AGT`, `KIOSK` and `BSC` . Not required for others. This has to match the data submitted to NPCI for this agent ID\n",
            "example": "6000011234"
          }
        }
      },
      "autofetchBulkResponse": {
        "required": [
          "success",
          "traceId"
        ],
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "traceId": {
            "type": "string",
            "example": "C3SFG0O6N88R6UI7EQ"
          }
        }
      },
      "autofetchSubscription": {
        "type": "object",
        "properties": {
          "biller": {
            "$ref": "#/components/schemas/autofetchSubscriptionBiller"
          },
          "customer": {
            "$ref": "#/components/schemas/customerDetails"
          },
          "hash": {
            "type": "string",
            "example": "d28ca210e0267a13fa0db18ee96a349dc4578f032e5902192af762763224204a"
          },
          "is_active": {
            "type": "boolean",
            "example": true
          },
          "last_fetch_date": {
            "type": "string",
            "format": "date",
            "example": "2017-07-21T00:00:00.000Z"
          }
        }
      },
      "autofetchSubscriptionBiller": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The biller ID on BBPS",
            "example": "MAHI00000NATIC"
          }
        },
        "x-go-gen-location": "models",
        "x-go-name": "BillerDetails"
      },
      "autofetchSubscriptionBulk": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/autofetchSubscriptionBulkItem"
            }
          }
        }
      },
      "autofetchSubscriptionBulkItem": {
        "type": "object",
        "properties": {
          "agent": {
            "$ref": "#/components/schemas/agentDetails"
          },
          "biller": {
            "$ref": "#/components/schemas/autofetchSubscriptionBiller"
          },
          "customer": {
            "$ref": "#/components/schemas/customerDetails"
          },
          "hash": {
            "type": "string",
            "example": "d28ca210e0267a13fa0db18ee96a349dc4578f032e5902192af762763224204a"
          },
          "is_active": {
            "type": "boolean",
            "example": true
          },
          "next_fetch_date": {
            "type": "string",
            "format": "date",
            "example": "2017-07-21T00:00:00.000Z"
          }
        }
      },
      "bbpsFailureReason": {
        "required": [
          "code",
          "message"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "BBPS Error code",
            "example": "ERR004"
          },
          "message": {
            "type": "string",
            "description": "BBPS Failure message",
            "example": "customer not found"
          }
        }
      },
      "billAdditionalInfo": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/additionalInfoLineItem"
        },
        "x-go-name": "BillAdditionalInfo"
      },
      "billData": {
        "required": [
          "amount",
          "billDate",
          "billNumber",
          "billPeriod",
          "customerName",
          "dueDate"
        ],
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "example": 120000
          },
          "billDate": {
            "type": "string",
            "format": "date",
            "example": "2021-01-02T00:00:00.000Z"
          },
          "billNumber": {
            "type": "string",
            "example": "1232332"
          },
          "billPeriod": {
            "type": "string",
            "enum": [
              "Onetime",
              "Daily",
              "Weekly",
              "BiMontly",
              "Monthly",
              "Quarterly",
              "HalfYearly",
              "AsPresented"
            ]
          },
          "customerName": {
            "type": "string",
            "example": "Manoj Chekuri"
          },
          "dueDate": {
            "type": "string",
            "format": "date",
            "example": "2021-09-24T00:00:00.000Z"
          }
        },
        "x-go-name": "BillData"
      },
      "billFetchResponseData": {
        "required": [
          "refId",
          "status"
        ],
        "type": "object",
        "properties": {
          "additionalInfo": {
            "$ref": "#/components/schemas/billAdditionalInfo"
          },
          "autoFetchHash": {
            "type": "string",
            "example": "d28ca210e0267a13fa0db18ee96a349dc4578f032e5902192af762763224204a"
          },
          "bill": {
            "$ref": "#/components/schemas/billData"
          },
          "billerRefId": {
            "type": "string",
            "example": "7f16a032e514"
          },
          "exactness": {
            "type": "string",
            "example": "EXACT/EXACT_UP/EXACT_DOWN/ADHOC"
          },
          "failureReason": {
            "$ref": "#/components/schemas/bbpsFailureReason"
          },
          "paymentLimits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/paymentModeSpec"
            },
            "x-omitempty": true
          },
          "refId": {
            "type": "string",
            "description": "BBPS Reference ID",
            "example": "HENSVVR4QOS7X1UGPY7JGUV444P10102202"
          },
          "status": {
            "type": "string",
            "enum": [
              "Processing",
              "Success",
              "Failure"
            ]
          }
        }
      },
      "billParameterItem": {
        "required": [
          "name",
          "value"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The display name of the parameter. This has to match what is sent in fields.",
            "example": "Loan Number"
          },
          "value": {
            "type": "string",
            "description": "The value of the customer parameter",
            "example": "1895159"
          }
        }
      },
      "billParameters": {
        "type": "array",
        "description": "The bill params for fetching the bill",
        "items": {
          "$ref": "#/components/schemas/billParameterItem"
        }
      },
      "billPaymentResponseData": {
        "required": [
          "refId",
          "status"
        ],
        "type": "object",
        "properties": {
          "billerId": {
            "type": "string",
            "description": "The biller ID on BBPS",
            "example": "MAHI00000NATIC"
          },
          "billerRefId": {
            "type": "string",
            "example": "ZA6291A177"
          },
          "failureReason": {
            "$ref": "#/components/schemas/bbpsFailureReason"
          },
          "paymentDetails": {
            "$ref": "#/components/schemas/paymentDetails"
          },
          "refId": {
            "type": "string",
            "example": "HENSVVR4QOS7X1UGPY7JGUV444P10102202"
          },
          "status": {
            "type": "string",
            "example": "PROCESSING/COMPLETE/TIMEOUT"
          },
          "transactionId": {
            "type": "string",
            "example": "AX30910192192192192"
          }
        }
      },
      "billerDetails": {
        "required": [
          "categoryName",
          "customerParams",
          "exactness",
          "fetchApiType",
          "id",
          "name",
          "payWithoutFetchAllowed",
          "paymentChannels",
          "paymentModes",
          "supportsPendingStatus"
        ],
        "type": "object",
        "properties": {
          "categoryName": {
            "type": "string",
            "example": "loan-repayment"
          },
          "city": {
            "type": "string",
            "example": "city"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "example": "2021-11-12T08:07:04.572Z",
            "x-omitempty": false
          },
          "customerParams": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/customerParamSpec"
            }
          },
          "customerParamsGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/customerParamsGroupItem"
            }
          },
          "exactness": {
            "type": "string",
            "enum": [
              "Exact",
              "Exact and above",
              "Exact and below"
            ]
          },
          "fetchApiType": {
            "type": "string",
            "description": "Denotes whether the biller accepts Fetch, Validate or Direct payment.",
            "enum": [
              "BILL_FETCH",
              "BILL_VALIDATE",
              "BILL_DIRECT"
            ]
          },
          "id": {
            "type": "string",
            "example": "ADIT00000NAT0T"
          },
          "logo": {
            "type": "string",
            "example": "logo"
          },
          "modifiedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "example": "2021-11-12T08:07:04.572Z",
            "x-omitempty": false
          },
          "name": {
            "type": "string",
            "example": "Aditya Birla Sun Life Insurance"
          },
          "payWithoutFetchAllowed": {
            "type": "boolean",
            "example": true
          },
          "paymentChannels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/paymentChannelSpec"
            }
          },
          "paymentModes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/paymentModeSpec"
            }
          },
          "pincode": {
            "type": "string",
            "example": "pincode"
          },
          "plans": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/planItem"
            }
          },
          "state": {
            "type": "string",
            "example": "state"
          },
          "supportsPendingStatus": {
            "type": "boolean",
            "example": false
          },
          "tags": {
            "type": "string",
            "example": "tags"
          }
        },
        "x-go-name": "CouBillerDetails"
      },
      "billerListResponse": {
        "required": [
          "success",
          "traceId"
        ],
        "type": "object",
        "properties": {
          "data": {
            "required": [
              "billers"
            ],
            "type": "object",
            "properties": {
              "billers": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/billerDetails"
                }
              },
              "nextPage": {
                "type": "string",
                "example": "/api/bbps/billers?search=Aditya&CategoryCode=Loan+Repayment&CategoryCode=Insurance&after=ABCC00000PTNNS"
              },
              "total": {
                "type": "integer",
                "example": 3000
              }
            }
          },
          "error": {
            "$ref": "#/components/schemas/errorMessage"
          },
          "success": {
            "type": "boolean",
            "example": true
          },
          "traceId": {
            "type": "string",
            "example": "C3SFG0O6N88R6UI7EQ"
          }
        }
      },
      "categoriesListResponse": {
        "required": [
          "success",
          "traceId"
        ],
        "type": "object",
        "properties": {
          "data": {
            "required": [
              "categories"
            ],
            "type": "object",
            "properties": {
              "categories": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/categoryListItem"
                }
              }
            }
          },
          "error": {
            "$ref": "#/components/schemas/errorMessage"
          },
          "success": {
            "type": "boolean",
            "example": true
          },
          "traceId": {
            "type": "string",
            "example": "C3SFG0O6N88R6UI7EQ"
          }
        }
      },
      "categoryListItem": {
        "type": "object",
        "properties": {
          "billerCount": {
            "type": "integer",
            "example": 10
          },
          "name": {
            "type": "string",
            "example": "Loan Repayment"
          }
        }
      },
      "couAgentBillFetchRequest": {
        "required": [
          "agent",
          "biller",
          "customer"
        ],
        "type": "object",
        "properties": {
          "agent": {
            "$ref": "#/components/schemas/agentDetails"
          },
          "allowFetchForAdhocBillers": {
            "type": "boolean",
            "description": "On debug, make fetch for payment only billers NEGATIVE 20",
            "nullable": true
          },
          "autoFetch": {
            "type": "boolean",
            "description": "When `true`, enables autofetch on successful bill.",
            "example": true
          },
          "biller": {
            "$ref": "#/components/schemas/autofetchSubscriptionBiller"
          },
          "customer": {
            "$ref": "#/components/schemas/customerDetails"
          },
          "debug": {
            "type": "boolean",
            "description": "When `true`, param validation is disabled",
            "example": false
          }
        },
        "x-go-name": "CouAgentBillFetchRequest",
        "x-omitempty": true
      },
      "couAgentBillFetchResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/billFetchResponseData"
          },
          "success": {
            "type": "boolean",
            "example": true
          },
          "traceId": {
            "type": "string",
            "example": "C3SFG0O6N88R6UI7EQ"
          }
        },
        "x-go-name": "CouAgentBillFetchResponse"
      },
      "couAgentBillPaymentRequest": {
        "required": [
          "paymentDetails"
        ],
        "type": "object",
        "properties": {
          "agent": {
            "$ref": "#/components/schemas/agentDetails"
          },
          "biller": {
            "$ref": "#/components/schemas/autofetchSubscriptionBiller"
          },
          "customer": {
            "$ref": "#/components/schemas/customerDetails"
          },
          "debug": {
            "type": "boolean",
            "description": "When a non-direct payment is being made, refId of fetch/validate is used to populate customer and biller data. When `debug` field is set to `true`, passed customer, biller or agent details will be replace the fetch/validate data. This allows us to run test cases that require diff details from initial fetch/validate request.",
            "example": false
          },
          "do-ift-status-check": {
            "type": "boolean",
            "description": "When debug is enabled, do-ift-status-check will do status check of internal fund transfer.",
            "example": false
          },
          "dummyAgentId": {
            "type": "string",
            "description": "On debug, this is the agent id NEGATIVE 12",
            "nullable": true
          },
          "dummyAmount": {
            "type": "integer",
            "description": "On debug, this is the final amount NEGATIVE 11, 22",
            "nullable": true
          },
          "dummyBillerId": {
            "type": "string",
            "description": "On debug, this is the billerId NEGATIVE 13",
            "nullable": true
          },
          "dummyMsgId": {
            "type": "string",
            "description": "On debug, this is msgId NEGATIVE 10",
            "nullable": true
          },
          "dummyTransactionRefId": {
            "type": "string",
            "description": "When debug is enabled, this dummy-transaction-id is used as the transaction id. This allows us to test arbitrary length refId test cases.",
            "example": "dummy-transaction-id"
          },
          "headTimestamp": {
            "type": "string",
            "description": "On debug, this value is used as head timestamp NEGATIVE 5",
            "nullable": true
          },
          "headVersion": {
            "type": "string",
            "description": "On debug, this head version is used. NEGATIVE - 1",
            "nullable": true
          },
          "hit-fund-transfer": {
            "type": "boolean",
            "description": "When debug is enabled, this hits the fundtransfer API",
            "example": false
          },
          "invalidCustomerTagKey": {
            "type": "boolean",
            "description": "On debug, invalid customer params will be sent NEGATIVE 7",
            "nullable": true
          },
          "invalidCustomerTagValue": {
            "type": "boolean",
            "description": "On debug, pass invalid customer tag value NEGATIVE 15",
            "nullable": true
          },
          "invalidPaymentInformation": {
            "type": "string",
            "description": "On debug, this value is sent in payment information NEGATIVE - 4",
            "nullable": true
          },
          "ouid": {
            "type": "string",
            "nullable": true
          },
          "passBlankPaymentInformation": {
            "type": "boolean",
            "description": "On debug, pass blank payment information NEGATIVE - 26",
            "nullable": true
          },
          "paymentDetails": {
            "$ref": "#/components/schemas/paymentDetails"
          },
          "refId": {
            "type": "string",
            "description": "BBPS Reference ID",
            "example": "HENSVVR4QOS7X1UGPY7JGUV444P10102202"
          },
          "skip-npci-heartbeat": {
            "type": "boolean",
            "description": "When debug is enabled, skips the npci heartbeat check before issuing payment request",
            "example": false
          },
          "skipBillerResponse": {
            "type": "boolean",
            "description": "On debug, don't send biller response on fetch req NEGATIVE 21",
            "nullable": true
          },
          "skipFetch": {
            "type": "boolean",
            "description": "On debug, skip fetch request before payment, NEGATIVE - 27,",
            "nullable": true
          },
          "skipPaymentResponseAck": {
            "type": "boolean",
            "description": "When debug is enabled, skip the final acknowledgement. This allows us to test \"Elimination of Reversal\". The details on which case to skip ack is sent via \"eliminationOfReversalDetails\"",
            "example": false
          },
          "transactionProvider": {
            "type": "string",
            "description": "On debug, this is the transaction provider NEGATIVE 14",
            "nullable": true
          }
        },
        "x-go-name": "CouAgentBillPaymentRequest",
        "x-omitempty": true
      },
      "couAgentBillPaymentResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/billPaymentResponseData"
          },
          "success": {
            "type": "boolean",
            "example": true
          },
          "traceId": {
            "type": "string",
            "example": "C3SFG0O6N88R6UI7EQ"
          }
        },
        "x-go-name": "CouAgentBillPaymentResponse",
        "x-omitempty": true
      },
      "couAgentDisputeRequest": {
        "required": [
          "description",
          "disputeType",
          "txnReferenceId"
        ],
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "example": "Amount deducted multiple times."
          },
          "disputeType": {
            "type": "string",
            "enum": [
              "account-not-updated",
              "double-payment",
              "paid-to-wrong-account",
              "others",
              "amount-deducted-biller-credited-no-transaction-id",
              "amount-deducted-biller-not-credited-no-transaction-id",
              "amount-deducted-multiple-times"
            ]
          },
          "txnReferenceId": {
            "type": "string",
            "example": "HENSVVR4QOS7X1UGPY7JGUV444P10102202"
          }
        },
        "x-go-name": "CouAgentDisputeRequest",
        "x-omitempty": true
      },
      "couAgentDisputeResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/disputeResponseData"
          },
          "success": {
            "type": "boolean",
            "example": true
          },
          "traceId": {
            "type": "string",
            "example": "C3SFG0O6N88R6UI7EQ"
          }
        },
        "x-go-name": "CouAgentDisputeResponse",
        "x-omitempty": true
      },
      "customerDetails": {
        "required": [
          "billParameters",
          "mobile"
        ],
        "type": "object",
        "properties": {
          "billParameters": {
            "$ref": "#/components/schemas/billParameters"
          },
          "mobile": {
            "type": "string",
            "example": "9481773053"
          }
        }
      },
      "customerParamSpec": {
        "required": [
          "dataType",
          "maxLength",
          "minLength",
          "optional",
          "paramName",
          "regex",
          "values",
          "visibility"
        ],
        "type": "object",
        "properties": {
          "dataType": {
            "type": "string",
            "example": "ALPHANUMERIC"
          },
          "maxLength": {
            "type": "integer",
            "example": 15
          },
          "minLength": {
            "type": "integer",
            "example": 7
          },
          "optional": {
            "type": "boolean",
            "example": false
          },
          "paramName": {
            "type": "string",
            "example": "Loan Account Number"
          },
          "regex": {
            "type": "string",
            "example": "^[a-zA-Z0-9]{7,15}"
          },
          "values": {
            "type": "string"
          },
          "visibility": {
            "type": "boolean",
            "example": true
          }
        }
      },
      "customerParamsGroupItem": {
        "type": "array",
        "items": {
          "type": "string",
          "example": "Param 1"
        }
      },
      "disableAutofetchResponse": {
        "required": [
          "success",
          "traceId"
        ],
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "traceId": {
            "type": "string",
            "example": "C3SFG0O6N88R6UI7EQ"
          }
        }
      },
      "disputeListItem": {
        "type": "object",
        "properties": {
          "assigned": {
            "type": "string",
            "description": "BBPOU to which the complaint is assigned",
            "example": "ADIT00000NATRA"
          },
          "complaintId": {
            "type": "string",
            "description": "Complaint ID",
            "example": "Loan Repayment"
          },
          "complaintStatus": {
            "type": "string",
            "description": "Status of the complaint",
            "example": "Aditya Birla Housing Finance Limited",
            "enum": [
              "INITIALIZED",
              "ASSIGNED",
              "RE_ASSIGNED",
              "ASSIGNED_TO_BOU",
              "ASSIGNED_TO_COU",
              "ASSIGNED_TO_OU",
              "ESCALATED",
              "RESOLVED",
              "UNRESOLVED"
            ]
          },
          "refId": {
            "type": "string",
            "description": "Reference ID",
            "example": "Loan Repayment"
          },
          "remarks": {
            "type": "string",
            "description": "BBPS Complaint remarks",
            "example": "ADIT00000NATRA"
          },
          "responseCode": {
            "type": "string",
            "description": "Carries the response code indicating success or failure of the transaction",
            "example": "ADIT00000NATRA"
          },
          "responseReason": {
            "type": "string",
            "example": "ADIT00000NATRA"
          }
        }
      },
      "disputeListResponse": {
        "required": [
          "success",
          "traceId"
        ],
        "type": "object",
        "properties": {
          "data": {
            "required": [
              "disputes"
            ],
            "type": "object",
            "properties": {
              "disputes": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/disputeListItem"
                }
              },
              "nextPage": {
                "type": "string",
                "example": "/api/bbps/billers?search=Aditya&CategoryCode=Loan+Repayment&CategoryCode=Insurance&after=ABCC00000PTNNS"
              },
              "total": {
                "type": "integer",
                "example": 3000
              }
            }
          },
          "error": {
            "$ref": "#/components/schemas/errorMessage"
          },
          "success": {
            "type": "boolean",
            "example": true
          },
          "traceId": {
            "type": "string",
            "example": "C3SFG0O6N88R6UI7EQ"
          }
        }
      },
      "disputeResponseData": {
        "required": [
          "assignedTo",
          "disputeId",
          "refId",
          "remarks",
          "status"
        ],
        "type": "object",
        "properties": {
          "assignedTo": {
            "type": "string",
            "example": "ICICI BOU"
          },
          "disputeId": {
            "type": "string",
            "example": "OP0121046567755"
          },
          "refId": {
            "type": "string",
            "example": "HENSVVR4QOS7X1UGPY7JGUV444P10102202"
          },
          "remarks": {
            "type": "string",
            "example": "Resolved in favour of Biller"
          },
          "status": {
            "type": "string",
            "example": "OPEN",
            "enum": [
              "PROCESSING",
              "OPEN",
              "CLOSED"
            ]
          }
        },
        "x-go-name": "DisputeResponseData"
      },
      "errorMessage": {
        "required": [
          "code",
          "message"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "example": "validation-error"
          },
          "message": {
            "type": "string",
            "example": "Input is invalid"
          }
        }
      },
      "fetchTokenRequest": {
        "type": "object",
        "properties": {
          "clientID": {
            "type": "string",
            "description": "Client ID",
            "example": "james-bond"
          },
          "secret": {
            "type": "string",
            "description": "Client Secret",
            "example": "5ja0077m-55e0-47s9-9bo7-ndaa18a7c0f7"
          }
        },
        "description": "Fetch Token API payload"
      },
      "fetchTokenResponse": {
        "allOf": [
          {
            "required": [
              "expiresIn",
              "token"
            ],
            "type": "object",
            "properties": {
              "expiresIn": {
                "type": "integer",
                "description": "Token expiry duration in seconds",
                "example": 3600
              },
              "token": {
                "type": "string",
                "description": "Token to be used in subsequent requests",
                "example": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6ImxEUXBadm5xRmtTdlRaMDV6NFdjTjl0My0zY0JSVWo5di1rYnVNX2dpQkEifQ.eyJleHAiOjE2NTgzMTUwMDcsImlhdCI6MTY1ODMxMjAwNywianRpIjoiMjQzMTAwN2MtODAwNy00MDA3LWI5ZWUtZTQ4MmY2YTU3ZGViIiwiaXNzIjoiaHR0cHM6Ly9hdXRoLWRldi5zZXR1LmNvL2F1dGgvcmVhbG1zL2NvdS1kYy1qYW1lcy1ib25kLXVhdCIsImF1ZCI6WyJqYW1lcy1ib25kIiwiYWNjb3VudCJdLCJzdWIiOiI0ZDhkMDY1Mi1kMmY2LTQyMWYtODNkMi0xYWUxYjc5ZTI1ZGIiLCJ0eXAiOiJCZWFyZXIiLCJhenAiOiJqYW1lcy1ib25kIiwic2Vzc2lvbl9zdGF0ZSI6ImExOThkMDA3LWViOWQtNDAwNy05NGRjLTNlMjJmYTEzYTAwNyIsImFjciI6IjEiLCJhbGxvd2VkLW9yaWdpbnMiOlsiaHR0cHM6Ly9qYW1lcy1ib25kLWNvdWRjLnNldHUuY28iXSwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIlNlY3JldF9JbnRlbGxpZ2VuY2VfU2VydmljZSJdfSwicmVzb3VyY2VfYWNjZXNzIjp7ImphbWVzLWJvbmQiOnsicm9sZXMiOlsiU2VjcmV0X0ludGVsbGlnZW5jZV9TZXJ2aWNlIl19LCJhY2NvdW50Ijp7InJvbGVzIjpbImNvdW50ZXItdGVycm9yaXNtIiwiY291bnRlci1wcm9saWZlcmF0aW9uIl19fSwic2NvcGUiOiJiYnBzOmJvbmQiLCJjbGllbnRJZCI6ImphbWVzLWJvbmQiLCJjbGllbnRIb3N0IjoiMDA3LjAwNy4wMDcuMDA3IiwiZW1haWxfdmVyaWZpZWQiOmZhbHNlLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiJzZXJ2aWNlLWFjY291bnQtamFtZXMtYm9uZCIsImNsaWVudEFkZHJlc3MiOiIwMDcuMDA3LjAwNy4wMDcifQ.svjuDXhx71uur_XYDCYLlObPBWctPHCDn1DtAAS-xMvnAvPdgqqVIUbGXdBxePE-blJPUDWH9J4ZXj5-kvi3onGdnmQxZcckW7dmIRrfTtUMCBj_4iefqiDV1D58Fblf9hCGjVGVWL9fuatNFvV46IaVREfaUTKuSbqwzhMpSGICJWhOM1Jt1Z2pB0x3e55dgmqhjeThZrstOwsJ2GTQ5N9gFennpmqmK_HVXU-rFwJzD44EMsN5GeH6Hh8zSC35NYkagrrlOkiuPGukoOMC9xFeGKGMSML3ve8_NmPVdhM6BaOwsau4wEJ-VV4oRY7TEl7d-IXmZqCVE0vyV2GZjQ"
              }
            }
          },
          {
            "$ref": "#/components/schemas/successAndTracerDetails"
          }
        ]
      },
      "fetchedBillsListResponse": {
        "required": [
          "success",
          "traceId"
        ],
        "type": "object",
        "properties": {
          "data": {
            "required": [
              "bills"
            ],
            "type": "object",
            "properties": {
              "bills": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/billFetchResponseData"
                }
              },
              "nextPage": {
                "type": "string",
                "example": "/api/v1/bbps/fetched-bills?autoFetchHash=xyz&after=ABCC00000PTNNS&limit=5"
              },
              "total": {
                "type": "integer",
                "example": 3000
              }
            }
          },
          "error": {
            "$ref": "#/components/schemas/errorMessage"
          },
          "success": {
            "type": "boolean",
            "example": true
          },
          "traceId": {
            "type": "string",
            "example": "C3SFG0O6N88R6UI7EQ"
          }
        },
        "x-go-name": "FetchedBillsListResponse"
      },
      "genericErrorResponse": {
        "required": [
          "error",
          "success",
          "traceId"
        ],
        "type": "object",
        "properties": {
          "error": {
            "$ref": "#/components/schemas/errorMessage"
          },
          "success": {
            "type": "boolean",
            "example": false
          },
          "traceId": {
            "type": "string",
            "example": "C3SFG0O6N88R6UI7EQ"
          }
        }
      },
      "genericRefIdResponse": {
        "required": [
          "data",
          "success",
          "traceId"
        ],
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/wrappedRefId"
          },
          "success": {
            "type": "boolean",
            "example": true
          },
          "traceId": {
            "type": "string",
            "example": "HENSVVR4QOS7X1UGPY7JGUV444P10461713"
          }
        }
      },
      "healthResponseParam": {
        "required": [
          "environment",
          "server",
          "version"
        ],
        "type": "object",
        "properties": {
          "environment": {
            "type": "string",
            "example": "PROD"
          },
          "server": {
            "type": "string",
            "example": "mistborn"
          },
          "version": {
            "type": "string",
            "example": "db42717a829da9d3061e4f409f3c0ee9935b72a5"
          }
        },
        "x-go-name": "HealthResponseParam",
        "x-omitempty": true
      },
      "listAutofetchSubscriptionsResponse": {
        "required": [
          "success",
          "traceId"
        ],
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "subscriptions": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/autofetchSubscription"
                }
              }
            }
          },
          "success": {
            "type": "boolean",
            "example": true
          },
          "traceId": {
            "type": "string",
            "example": "C3SFG0O6N88R6UI7EQ"
          }
        }
      },
      "paymentChannelSpec": {
        "required": [
          "maxLimit",
          "minLimit",
          "paymentChannel",
          "supportsPendingStatus"
        ],
        "type": "object",
        "properties": {
          "maxLimit": {
            "type": "integer",
            "example": 500000000
          },
          "minLimit": {
            "type": "integer",
            "example": 10100
          },
          "paymentChannel": {
            "type": "string",
            "example": "Internet"
          },
          "supportsPendingStatus": {
            "type": "boolean",
            "example": false
          }
        }
      },
      "paymentDetails": {
        "type": "object",
        "properties": {
          "COUcustConvFee": {
            "type": "integer",
            "nullable": true,
            "example": 10
          },
          "amount": {
            "type": "integer",
            "example": 10000
          },
          "currency": {
            "type": "integer",
            "nullable": true,
            "example": 356
          },
          "custConvFee": {
            "type": "integer",
            "nullable": true,
            "example": 59
          },
          "mode": {
            "type": "string",
            "example": "INTERNET BANKING",
            "enum": [
              "Internet Banking",
              "Debit Card",
              "Credit Card",
              "Prepaid Card",
              "IMPS",
              "Cash",
              "UPI",
              "Wallet",
              "NEFT",
              "AEPS",
              "Account Transfer",
              "Bharat QR",
              "USSD"
            ]
          },
          "paymentParams": {
            "$ref": "#/components/schemas/paymentParameters"
          },
          "paymentRefId": {
            "type": "string",
            "example": "BD019181220291"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "example": "2020-12-12T07:42:00.000Z"
          }
        }
      },
      "paymentModeSpec": {
        "required": [
          "maxLimit",
          "minLimit",
          "paymentMode",
          "supportsPendingStatus"
        ],
        "type": "object",
        "properties": {
          "maxLimit": {
            "type": "integer",
            "example": 500000000
          },
          "minLimit": {
            "type": "integer",
            "example": 10100
          },
          "paymentMode": {
            "type": "string",
            "example": "Internet_Banking"
          },
          "supportsPendingStatus": {
            "type": "boolean",
            "example": false
          }
        }
      },
      "paymentParameterItem": {
        "required": [
          "name",
          "value"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The display name of the parameter. This has to match what is sent in fields.",
            "example": "Early Payment Amount"
          },
          "value": {
            "type": "string",
            "description": "The value of the payment parameter",
            "example": "100"
          }
        }
      },
      "paymentParameters": {
        "type": "array",
        "description": "Additional Payment Parameters",
        "items": {
          "$ref": "#/components/schemas/paymentParameterItem"
        }
      },
      "planItem": {
        "required": [
          "amount",
          "categoryType",
          "description",
          "id",
          "status"
        ],
        "type": "object",
        "properties": {
          "additionalInfo": {
            "minItems": 1,
            "type": "array",
            "description": "Plan Additional information details provided by the Biller.",
            "example": [
              {
                "paramName": "Mobile Number",
                "paramValue": "Text"
              }
            ],
            "items": {
              "type": "object",
              "properties": {
                "paramName": {
                  "type": "string",
                  "example": "Plan Additional information parameter name."
                },
                "paramValue": {
                  "type": "string",
                  "example": "Plan Additional information parameter value."
                }
              },
              "example": {
                "paramName": "Mobile Number",
                "paramValue": "Text"
              },
              "x-go-name": "PlanAdditionalInfoItem"
            },
            "x-omitempty": true
          },
          "amount": {
            "type": "string",
            "example": "22"
          },
          "categorySubType": {
            "type": "object",
            "properties": {},
            "description": "Plan sub category as defined by the Biller.",
            "example": {
              "subType": "1 Month"
            },
            "x-omitempty": true
          },
          "categoryType": {
            "type": "string",
            "description": "Plan category as defined by the Biller.",
            "example": "VIP"
          },
          "description": {
            "type": "string",
            "description": "Plan description as defined by the Biller.",
            "example": "Unlimited Live Sports"
          },
          "effectiveFrom": {
            "type": "string",
            "description": "Effective from date of corresponding Plan.",
            "format": "date",
            "nullable": true,
            "example": "2017-07-21T00:00:00.000Z",
            "x-omitempty": false
          },
          "effectiveTo": {
            "type": "string",
            "description": "Effective to date of corresponding Plan.",
            "format": "date",
            "nullable": true,
            "example": "2020-08-21T00:00:00.000Z",
            "x-omitempty": false
          },
          "id": {
            "type": "string",
            "description": "Plan ID",
            "example": "1"
          },
          "status": {
            "type": "string",
            "description": "Effective to date of corresponding Plan.",
            "example": "ACTIVE",
            "enum": [
              "ACTIVE",
              "DEACTIVATED"
            ]
          }
        }
      },
      "refIdBasedRequest": {
        "required": [
          "refId"
        ],
        "type": "object",
        "properties": {
          "refId": {
            "type": "string",
            "example": "LNMSQQR4RKT7X1UGPY7JGUV454PL9T2C689"
          }
        },
        "x-go-name": "RefIdBasedRequest",
        "x-omitempty": true
      },
      "successAndTracerDetails": {
        "required": [
          "success",
          "traceId"
        ],
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "traceId": {
            "type": "string",
            "example": "C3SFG0O6N88R6UI7EQ"
          }
        }
      },
      "transactionsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/txnResponseData"
          },
          "success": {
            "type": "boolean",
            "example": true
          },
          "traceId": {
            "type": "string",
            "example": "C3SFG0O6N88R6UI7EQ"
          }
        },
        "x-go-name": "TransactionsResponse",
        "x-omitempty": true
      },
      "txnLineItem": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "example": 120000
          },
          "billerId": {
            "type": "string",
            "description": "The biller ID on BBPS",
            "example": "MAHI00000NATIC"
          },
          "customerMobileNumber": {
            "type": "string",
            "example": "9181878282"
          },
          "partnerRefId": {
            "type": "string",
            "example": "AX30910192192192192"
          },
          "refId": {
            "type": "string",
            "description": "BBPS Reference ID",
            "example": "HENSVVR4QOS7X1UGPY7JGUV444P10102202"
          },
          "status": {
            "type": "string",
            "enum": [
              "Processing",
              "Success",
              "Failure",
              "Error"
            ]
          },
          "transactionId": {
            "type": "string",
            "description": "Transaction ID",
            "example": "AX30910192192192192"
          }
        }
      },
      "txnResponseData": {
        "type": "object",
        "properties": {
          "nextPage": {
            "type": "string",
            "example": "/api/bbps/billers?search=Aditya&CategoryCode=Loan+Repayment&CategoryCode=Insurance&after=ABCC00000PTNNS"
          },
          "transactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/txnLineItem"
            }
          }
        }
      },
      "wrappedRefId": {
        "required": [
          "refId"
        ],
        "type": "object",
        "properties": {
          "refId": {
            "type": "string",
            "example": "HENSVVR4QOS7X1UGPY7JGUV444P10102202"
          }
        }
      }
    },
    "securitySchemes": {
      "bbps": {
        "type": "oauth2",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "https://sandbox-kabini-coudc.setu.co/api/v1/auth/token",
            "scopes": {
              "bbps:partner": "Grant access to agent APIs"
            }
          }
        }
      }
    }
  }
}
