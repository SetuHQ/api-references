{
  "openapi": "3.0.2",
  "info": {
    "title": "seller_client",
    "description": "Seller client interface for ONDC network",
    "version": "0.1.0"
  },
  "paths": {
    "/api/health": {
      "get": {
        "summary": "Health Check",
        "description": "Checks the health of a project.\n\nIt returns 200 if the project is healthy.",
        "operationId": "health_check_api_health_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          }
        }
      }
    },
    "/api/echo/": {
      "post": {
        "tags": ["echo"],
        "summary": "Send Echo Message",
        "description": "Sends echo back to user.\n\n:param incoming_message: incoming message.\n:returns: message same as the incoming.",
        "operationId": "send_echo_message_api_echo__post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Message" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Message" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/redis/": {
      "get": {
        "tags": ["redis"],
        "summary": "Get Redis Value",
        "description": "Get value from redis.\n\n:param key: redis key, to get data from.\n:param redis_pool: redis connection pool.\n:returns: information from redis.",
        "operationId": "get_redis_value_api_redis__get",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Key", "type": "string" },
            "name": "key",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/RedisValueDTO" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["redis"],
        "summary": "Set Redis Value",
        "description": "Set value in redis.\n\n:param redis_value: new value data.\n:param redis_pool: redis connection pool.",
        "operationId": "set_redis_value_api_redis__put",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/RedisValueDTO" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/sellers": {
      "post": {
        "tags": ["seller"],
        "summary": "Create Seller",
        "description": "Create a seller\n\nArgs:\n    seller_dao (SellerDAO, optional): _description_. Defaults to Depends().\n\nReturns:\n    SellerMinifiedOutputDTO: _description_",
        "operationId": "create_seller_api_sellers_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/SellerInputDTO" }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SellerMinifiedOutputDTO"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SellerAlreadyExistsErrorDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/BadRequestErrorDTO" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericExceptionErrorDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidAuthTokenException"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/sellers/{setu_seller_id}": {
      "get": {
        "tags": ["seller"],
        "summary": "Get Seller",
        "description": "Get seller details by seller id\n\nArgs:\n    seller_id (int): _description_\n    seller_dao (SellerDAO, optional): _description_. Defaults to Depends().\n\nReturns:\n    SellerDTO: _description_",
        "operationId": "get_seller_api_sellers__setu_seller_id__get",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Setu Seller Id", "type": "integer" },
            "name": "setu_seller_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SellerDTO" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SellerDoesNotExistsErrorDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/BadRequestErrorDTO" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericExceptionErrorDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidAuthTokenException"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["seller"],
        "summary": "Delete Seller",
        "description": "Delete a seller by seller_id\n\nArgs:\n    seller_id (int): _description_\n    seller_dao (SellerDAO, optional): _description_. Defaults to Depends().",
        "operationId": "delete_seller_api_sellers__setu_seller_id__delete",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Setu Seller Id", "type": "integer" },
            "name": "setu_seller_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SellerDoesNotExistsErrorDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/BadRequestErrorDTO" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericExceptionErrorDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidAuthTokenException"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["seller"],
        "summary": "Update Seller",
        "description": "Update seller details by seller_id\n\nArgs:\n    seller_id (int): _description_\n    seller_dao (SellerDAO, optional): _description_. Defaults to Depends().",
        "operationId": "update_seller_api_sellers__setu_seller_id__patch",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Setu Seller Id", "type": "integer" },
            "name": "setu_seller_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/SellerDTO" }
            }
          },
          "required": true
        },
        "responses": {
          "204": { "description": "Successful Response" },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SellerDoesNotExistsErrorDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/BadRequestErrorDTO" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericExceptionErrorDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidAuthTokenException"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/storefronts": {
      "post": {
        "tags": ["storefront"],
        "summary": "Create Store Front",
        "description": "Create a store front\n\nArgs:\n    store_front_row (StoreFrontInputDTO): _description_\n    storefront_dao (StoreFrontDAO, optional): _description_.\n    Defaults to Depends().\n\nReturns:\n    StoreFrontMinifiedOutputDTO: _description_",
        "operationId": "create_store_front_api_storefronts_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/StoreFrontInputDTO" }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StoreFrontMinifiedOutputDTO"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StoreFrontAlreadyExistsErrorDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/BadRequestErrorDTO" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericExceptionErrorDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidAuthTokenException"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/storefronts/{setu_storefront_id}": {
      "get": {
        "tags": ["storefront"],
        "summary": "Get Store Front",
        "description": "Get store front by store front id\n\nArgs:\n    store_front_id (int): _description_\n    storefront_dao (StoreFrontDAO, optional): _description_.\n    Defaults to Depends().\n\nReturns:\n    StoreFrontOutputDTO: _description_",
        "operationId": "get_store_front_api_storefronts__setu_storefront_id__get",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Setu Storefront Id", "type": "integer" },
            "name": "setu_storefront_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/StoreFrontOutputDTO" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/seller_client__web__api__storefront__schema__StoreFrontDoesNotExistsErrorDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/BadRequestErrorDTO" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericExceptionErrorDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidAuthTokenException"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["storefront"],
        "summary": "Delete Store Front",
        "operationId": "delete_store_front_api_storefronts__setu_storefront_id__delete",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Setu Storefront Id", "type": "integer" },
            "name": "setu_storefront_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/seller_client__web__api__storefront__schema__StoreFrontDoesNotExistsErrorDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/BadRequestErrorDTO" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericExceptionErrorDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidAuthTokenException"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["storefront"],
        "summary": "Update Store Front",
        "description": "Update store front by store front id\n\nArgs:\n    store_front_id (int): _description_\n    store_front_row (StoreFrontUpdateDTO): _description_\n    storefront_dao (StoreFrontDAO, optional): _description_.\n    Defaults to Depends().",
        "operationId": "update_store_front_api_storefronts__setu_storefront_id__patch",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Setu Storefront Id", "type": "integer" },
            "name": "setu_storefront_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/StoreFrontUpdateDTO" }
            }
          },
          "required": true
        },
        "responses": {
          "204": { "description": "Successful Response" },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/seller_client__web__api__storefront__schema__StoreFrontDoesNotExistsErrorDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/BadRequestErrorDTO" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericExceptionErrorDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidAuthTokenException"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/storefronts/{setu_storefront_id}/catalogue/{storefront_catalogue_item_id}": {
      "get": {
        "tags": ["catalogue"],
        "summary": "Get Catalogue Item",
        "operationId": "get_catalogue_item_api_storefronts__setu_storefront_id__catalogue__storefront_catalogue_item_id__get",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Setu Storefront Id", "type": "integer" },
            "name": "setu_storefront_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Storefront Catalogue Item Id",
              "type": "string"
            },
            "name": "storefront_catalogue_item_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CatalogueDTO" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductDoesNotExistsErrorDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/BadRequestErrorDTO" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericExceptionErrorDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidAuthTokenException"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/storefronts/{setu_storefront_id}/catalogue": {
      "put": {
        "tags": ["catalogue"],
        "summary": "Create Update Catalogue",
        "description": "Create catalogue for store front.\n\nArgs:\n    setu_storefront_id (int): _description_\n    catalogue (ProductsInputDTO): _description_\n\nReturns:\n    ProductsUploadOutputDTO: _description_",
        "operationId": "create_update_catalogue_api_storefronts__setu_storefront_id__catalogue_put",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Setu Storefront Id", "type": "integer" },
            "name": "setu_storefront_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ProductsInputDTO" }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductsUploadOutputDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/BadRequestErrorDTO" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericExceptionErrorDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidAuthTokenException"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["catalogue"],
        "summary": "Delete Catalogue",
        "description": "Delete catalogue by store_front_id.\n\nArgs:\n    store_front_id (int): _description_\n    products (ProductsInputDTO): _description_\n    product_dao (ProductDAO, optional): _description_. Defaults to Depends().\n\nReturns:\n    _type_: _description_",
        "operationId": "delete_catalogue_api_storefronts__setu_storefront_id__catalogue_delete",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Setu Storefront Id", "type": "integer" },
            "name": "setu_storefront_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductsDeleteInputDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/seller_client__web__api__product__schema__StoreFrontDoesNotExistsErrorDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/BadRequestErrorDTO" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericExceptionErrorDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidAuthTokenException"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/storefronts/{setu_storefront_id}/catalogue/{storefront_catalogue_item_id}/inventory": {
      "patch": {
        "tags": ["catalogue"],
        "summary": "Update Product Inventory",
        "description": "Update product inventory.\n\nArgs:\n    storefront_id (int): _description_\n    storefront_product_id (UUID): _description_\n    product_inventory (ProductInventoryInputDTO): _description_\n    product_dao (ProductDAO, optional): _description_. Defaults to Depends().\n\nReturns:\n    _type_: _description_",
        "operationId": "update_product_inventory_api_storefronts__setu_storefront_id__catalogue__storefront_catalogue_item_id__inventory_patch",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Setu Storefront Id", "type": "integer" },
            "name": "setu_storefront_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Storefront Catalogue Item Id",
              "type": "string",
              "format": "uuid"
            },
            "name": "storefront_catalogue_item_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductInventoryInputDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": { "description": "Successful Response" },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductDoesNotExistsErrorDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/BadRequestErrorDTO" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericExceptionErrorDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidAuthTokenException"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/storefronts/{setu_storefront_id}/orders": {
      "get": {
        "tags": ["orders"],
        "summary": "Get Orders By Store Front Id",
        "operationId": "get_orders_by_store_front_id_api_storefronts__setu_storefront_id__orders_get",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Store Front Id", "type": "integer" },
            "name": "store_front_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Get Orders By Store Front Id Api Storefronts  Setu Storefront Id  Orders Get",
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/OrderOutputDTO" }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["orders"],
        "summary": "Update Orders By Store Front Id",
        "operationId": "update_orders_by_store_front_id_api_storefronts__setu_storefront_id__orders_put",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Store Front Id", "type": "integer" },
            "name": "store_front_id",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/OrderUpdateDTO" }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrdersUpdateOutputDTO"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["orders"],
        "summary": "Create Order By Store Front Id",
        "operationId": "create_order_by_store_front_id_api_storefronts__setu_storefront_id__orders_post",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Store Front Id", "type": "integer" },
            "name": "store_front_id",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/OrderBaseDTO" }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/metrics": {
      "get": {
        "summary": "Prometheus Metrics",
        "description": "Endpoint that serves Prometheus metrics.",
        "operationId": "prometheus_metrics_metrics_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ApprovedOrdersDTO": {
        "title": "ApprovedOrdersDTO",
        "type": "object",
        "properties": {
          "count": { "title": "Count", "type": "integer", "default": 0 },
          "approved_items": {
            "title": "Approved Items",
            "maxLength": 2083,
            "minLength": 1,
            "type": "string",
            "format": "uri"
          }
        },
        "description": "DTO for approved orders.\n\nArgs:\n    BaseModel (_type_): _description_"
      },
      "ApprovedProductsDTO": {
        "title": "ApprovedProductsDTO",
        "type": "object",
        "properties": {
          "count": { "title": "Count", "type": "integer", "default": 0 },
          "approved_items": {
            "title": "Approved Items",
            "maxLength": 2083,
            "minLength": 1,
            "type": "string",
            "format": "uri"
          }
        },
        "description": "DTO for approved products.\n\nArgs:\n    BaseModel (_type_): _description_"
      },
      "BadRequestErrorDTO": {
        "title": "BadRequestErrorDTO",
        "type": "object",
        "properties": {
          "status": {
            "title": "Status",
            "type": "string",
            "default": "BAD_REQUEST"
          },
          "success": {
            "title": "Success",
            "type": "boolean",
            "default": false
          },
          "error": {
            "title": "Error",
            "allOf": [{ "$ref": "#/components/schemas/BaseErrorDTO" }],
            "default": { "code": "2001" }
          }
        }
      },
      "BankAccountDTO": {
        "title": "BankAccountDTO",
        "required": [
          "beneficiary_name",
          "account_number",
          "ifsc_code",
          "bank_name"
        ],
        "type": "object",
        "properties": {
          "beneficiary_name": { "title": "Beneficiary Name", "type": "string" },
          "account_number": { "title": "Account Number", "type": "string" },
          "ifsc_code": {
            "title": "Ifsc Code",
            "pattern": "^[A-Z]{4}0[A-Z0-9]{6}$",
            "type": "string"
          },
          "bank_name": { "title": "Bank Name", "type": "string" }
        },
        "additionalProperties": false,
        "description": "DTO for bank account info.\n\nArgs:\n    BaseModel (_type_): _description_\n    extra (_type_, optional): _description_. Defaults to Extra.forbid."
      },
      "BankAccountInputDTO": {
        "title": "BankAccountInputDTO",
        "required": ["account_number", "ifsc_code"],
        "type": "object",
        "properties": {
          "account_number": { "title": "Account Number", "type": "string" },
          "ifsc_code": {
            "title": "Ifsc Code",
            "pattern": "^[A-Z]{4}0[A-Z0-9]{6}$",
            "type": "string"
          }
        },
        "additionalProperties": false,
        "description": "DTO for bank account info.\n\nArgs:\n    BaseModel (_type_): _description_\n    extra (_type_, optional): _description_. Defaults to Extra.forbid."
      },
      "BankAccountOutputDTO": {
        "title": "BankAccountOutputDTO",
        "required": ["account_number", "ifsc_code"],
        "type": "object",
        "properties": {
          "bank_name": { "title": "Bank Name", "type": "string" },
          "beneficiary_name": { "title": "Beneficiary Name", "type": "string" },
          "account_number": { "title": "Account Number", "type": "string" },
          "ifsc_code": {
            "title": "Ifsc Code",
            "pattern": "^[A-Z]{4}0[A-Z0-9]{6}$",
            "type": "string"
          }
        },
        "additionalProperties": false,
        "description": "DTO for bank account info.\n\nArgs:\n    BaseModel (_type_): _description_\n    extra (_type_, optional): _description_. Defaults to Extra.forbid."
      },
      "BaseErrorDTO": {
        "title": "BaseErrorDTO",
        "required": ["code"],
        "type": "object",
        "properties": {
          "code": { "title": "Code", "type": "string" },
          "message": { "title": "Message", "type": "string" }
        }
      },
      "BillingDetailsDTO": {
        "title": "BillingDetailsDTO",
        "required": [
          "legal_details",
          "registered_address",
          "contact_detail",
          "bank_account"
        ],
        "type": "object",
        "properties": {
          "legal_details": { "$ref": "#/components/schemas/LegalDetailsDTO" },
          "registered_address": {
            "$ref": "#/components/schemas/RegisteredAddressDTO"
          },
          "contact_detail": { "$ref": "#/components/schemas/ContactDetailDTO" },
          "bank_account": { "$ref": "#/components/schemas/BankAccountDTO" }
        },
        "additionalProperties": false,
        "description": "DTO for billing details.\n\nArgs:\n    BaseDTO (_type_): _description_"
      },
      "BusinessHourItemDTO": {
        "title": "BusinessHourItemDTO",
        "required": ["opening", "closing"],
        "type": "object",
        "properties": {
          "opening": { "title": "Opening", "type": "string" },
          "closing": { "title": "Closing", "type": "string" }
        },
        "additionalProperties": false,
        "description": "DTO for single item of business hour.\n\nArgs:\n    BaseModel (_type_): _description_"
      },
      "BusinessHoursDTO": {
        "title": "BusinessHoursDTO",
        "type": "object",
        "properties": {
          "monday": {
            "title": "Monday",
            "type": "array",
            "items": { "$ref": "#/components/schemas/BusinessHourItemDTO" }
          },
          "tuesday": {
            "title": "Tuesday",
            "type": "array",
            "items": { "$ref": "#/components/schemas/BusinessHourItemDTO" }
          },
          "wednesday": {
            "title": "Wednesday",
            "type": "array",
            "items": { "$ref": "#/components/schemas/BusinessHourItemDTO" }
          },
          "thursday": {
            "title": "Thursday",
            "type": "array",
            "items": { "$ref": "#/components/schemas/BusinessHourItemDTO" }
          },
          "friday": {
            "title": "Friday",
            "type": "array",
            "items": { "$ref": "#/components/schemas/BusinessHourItemDTO" }
          },
          "saturday": {
            "title": "Saturday",
            "type": "array",
            "items": { "$ref": "#/components/schemas/BusinessHourItemDTO" }
          },
          "sunday": {
            "title": "Sunday",
            "type": "array",
            "items": { "$ref": "#/components/schemas/BusinessHourItemDTO" }
          }
        },
        "additionalProperties": false,
        "description": "DTO for business hours.\n\nArgs:\n    BaseModel (_type_): _description_"
      },
      "BuyerDeliveryDetailDTO": {
        "title": "BuyerDeliveryDetailDTO",
        "required": ["address", "pincode"],
        "type": "object",
        "properties": {
          "address": { "title": "Address", "type": "string" },
          "pincode": { "title": "Pincode", "type": "integer" }
        },
        "additionalProperties": false
      },
      "BuyerDetailDTO": {
        "title": "BuyerDetailDTO",
        "required": ["name", "mobile_number", "delivery_address"],
        "type": "object",
        "properties": {
          "name": { "title": "Name", "type": "string" },
          "mobile_number": { "title": "Mobile Number", "type": "string" },
          "delivery_address": {
            "$ref": "#/components/schemas/BuyerDeliveryDetailDTO"
          }
        },
        "additionalProperties": false
      },
      "CatalogueDTO": {
        "title": "CatalogueDTO",
        "required": [
          "catalogue_item_id",
          "storefront_catalogue_item_id",
          "display_catalogue_item_id",
          "storefront",
          "name",
          "categories",
          "item_details",
          "item_policies",
          "serviceability",
          "status",
          "product_inventory_id",
          "storefront_id",
          "seller_id"
        ],
        "type": "object",
        "properties": {
          "_id": { "title": " Id", "type": "string" },
          "catalogue_item_id": {
            "title": "Catalogue Item Id",
            "type": "integer"
          },
          "storefront_catalogue_item_id": {
            "title": "Storefront Catalogue Item Id",
            "type": "string",
            "format": "uuid"
          },
          "display_catalogue_item_id": {
            "title": "Display Catalogue Item Id",
            "type": "string"
          },
          "parent_category": {
            "title": "Parent Category",
            "type": "string",
            "default": "F&B"
          },
          "storefront": {
            "$ref": "#/components/schemas/StoreFrontCatalogueDTO"
          },
          "name": { "title": "Name", "type": "string" },
          "categories": {
            "title": "Categories",
            "type": "array",
            "items": { "type": "string" }
          },
          "item_details": {
            "$ref": "#/components/schemas/CatalogueItemDetailsDTO"
          },
          "item_policies": { "$ref": "#/components/schemas/ItemPoliciesDTO" },
          "serviceability": {
            "$ref": "#/components/schemas/ServiceabilityCatalogueDTO"
          },
          "status": { "title": "Status", "type": "string" },
          "product_inventory_id": {
            "title": "Product Inventory Id",
            "type": "integer"
          },
          "storefront_id": { "title": "Storefront Id", "type": "integer" },
          "seller_id": { "title": "Seller Id", "type": "integer" }
        },
        "additionalProperties": false
      },
      "CatalogueItemDetailsDTO": {
        "title": "CatalogueItemDetailsDTO",
        "required": [
          "name",
          "symbol",
          "short_description",
          "long_description",
          "price"
        ],
        "type": "object",
        "properties": {
          "name": { "title": "Name", "type": "string" },
          "symbol": { "title": "Symbol", "type": "string" },
          "short_description": {
            "title": "Short Description",
            "type": "string"
          },
          "long_description": { "title": "Long Description", "type": "string" },
          "images": {
            "title": "Images",
            "type": "array",
            "items": {
              "maxLength": 2083,
              "minLength": 1,
              "type": "string",
              "format": "uri"
            }
          },
          "subcategory_specific_requirements": {
            "$ref": "#/components/schemas/SubcategorySpecificRequirementsDTO"
          },
          "price": { "$ref": "#/components/schemas/PriceDTO" }
        },
        "additionalProperties": false,
        "description": "DTO for product details.\n\nArgs:\n    BaseModel (_type_): _description_"
      },
      "ContactDetailDTO": {
        "title": "ContactDetailDTO",
        "required": ["phone", "email"],
        "type": "object",
        "properties": {
          "phone": {
            "title": "Phone",
            "pattern": "(\\+91)?(-)?\\s*?(91)?\\s*?(\\d{3})-?\\s*?(\\d{3})-?\\s*?(\\d{4})",
            "type": "string"
          },
          "email": { "title": "Email", "type": "string", "format": "email" }
        },
        "additionalProperties": false,
        "description": "DTO for contact detail.\n\nArgs:\n    BaseModel (_type_): _description_"
      },
      "FBDTO": {
        "title": "FBDTO",
        "required": ["is_vegetarian"],
        "type": "object",
        "properties": {
          "is_vegetarian": { "title": "Is Vegetarian", "type": "boolean" }
        },
        "additionalProperties": false,
        "description": "DTO for F&B category.\n\nArgs:\n    BaseModel (_type_): _description_"
      },
      "FailedOrdersDTO": {
        "title": "FailedOrdersDTO",
        "type": "object",
        "properties": {
          "count": { "title": "Count", "type": "integer", "default": 0 },
          "failed_items": {
            "title": "Failed Items",
            "maxLength": 2083,
            "minLength": 1,
            "type": "string",
            "format": "uri"
          }
        },
        "description": "DTO for failed orders.\n\nArgs:\n    BaseModel (_type_): _description_"
      },
      "FailedProductsDTO": {
        "title": "FailedProductsDTO",
        "type": "object",
        "properties": {
          "count": { "title": "Count", "type": "integer", "default": 0 },
          "failed_items": {
            "title": "Failed Items",
            "maxLength": 2083,
            "minLength": 1,
            "type": "string",
            "format": "uri"
          }
        },
        "description": "DTO for failed products.\n\nArgs:\n    BaseModel (_type_): _description_"
      },
      "GenericExceptionErrorDTO": {
        "title": "GenericExceptionErrorDTO",
        "type": "object",
        "properties": {
          "status": {
            "title": "Status",
            "type": "string",
            "default": "GENERIC_EXCEPTION"
          },
          "success": {
            "title": "Success",
            "type": "boolean",
            "default": false
          },
          "error": {
            "title": "Error",
            "allOf": [{ "$ref": "#/components/schemas/BaseErrorDTO" }],
            "default": { "code": "4001" }
          }
        }
      },
      "HTTPValidationError": {
        "title": "HTTPValidationError",
        "type": "object",
        "properties": {
          "detail": {
            "title": "Detail",
            "type": "array",
            "items": { "$ref": "#/components/schemas/ValidationError" }
          }
        }
      },
      "IncorporationType": {
        "title": "IncorporationType",
        "enum": ["PRLC", "PULC", "PAR", "LLP", "OPC", "SP", "NP"],
        "type": "string",
        "description": "List of all incorporation types."
      },
      "InvalidAuthTokenException": {
        "title": "InvalidAuthTokenException",
        "type": "object",
        "properties": {
          "status": {
            "title": "Status",
            "type": "string",
            "default": "INVALID_AUTH_TOKEN_ERROR"
          },
          "success": {
            "title": "Success",
            "type": "boolean",
            "default": false
          },
          "error": {
            "title": "Error",
            "allOf": [{ "$ref": "#/components/schemas/BaseErrorDTO" }],
            "default": { "code": "3001" }
          }
        }
      },
      "InventoryDTO": {
        "title": "InventoryDTO",
        "required": ["unit_denomination", "unit_value", "quantity"],
        "type": "object",
        "properties": {
          "unit_denomination": {
            "$ref": "#/components/schemas/UnitDenomination"
          },
          "unit_value": { "title": "Unit Value", "type": "integer" },
          "quantity": { "title": "Quantity", "type": "integer" }
        },
        "additionalProperties": false,
        "description": "DTO for product inventory.\n\nArgs:\n    BaseModel (_type_): _description_"
      },
      "ItemPoliciesDTO": {
        "title": "ItemPoliciesDTO",
        "required": [
          "returnable",
          "cancellable",
          "cod_availability",
          "time_to_ship"
        ],
        "type": "object",
        "properties": {
          "returnable": { "title": "Returnable", "type": "boolean" },
          "return_window": { "title": "Return Window", "type": "integer" },
          "seller_pickup_return": {
            "title": "Seller Pickup Return",
            "type": "boolean"
          },
          "cancellable": { "title": "Cancellable", "type": "boolean" },
          "cod_availability": {
            "title": "Cod Availability",
            "type": "boolean"
          },
          "time_to_ship": { "$ref": "#/components/schemas/TimeToShipDTO" },
          "max_sale_quantity": {
            "title": "Max Sale Quantity",
            "type": "integer"
          },
          "min_sale_quantity": {
            "title": "Min Sale Quantity",
            "type": "integer"
          }
        },
        "additionalProperties": false,
        "description": "DTO for product item policies.\n\nArgs:\n    BaseModel (_type_): _description_"
      },
      "LegalDetailsDTO": {
        "title": "LegalDetailsDTO",
        "required": [
          "incorporation_name",
          "incorporation_type",
          "gstin",
          "pan"
        ],
        "type": "object",
        "properties": {
          "incorporation_name": {
            "title": "Incorporation Name",
            "type": "string"
          },
          "incorporation_type": {
            "title": "Incorporation Type",
            "type": "string"
          },
          "gstin": {
            "title": "Gstin",
            "pattern": "^[0-9]{2}[A-Z]{5}[0-9]{4}[A-Z]{1}[1-9A-Z]{1}Z[0-9A-Z]{1}$",
            "type": "string"
          },
          "pan": {
            "title": "Pan",
            "pattern": "[A-Z]{5}[0-9]{4}[A-Z]{1}",
            "type": "string"
          }
        },
        "additionalProperties": false,
        "description": "DTO for legal details.\n\nArgs:\n    BaseDTO (_type_): _description_"
      },
      "LocationCoordinatesDTO": {
        "title": "LocationCoordinatesDTO",
        "required": ["coordinates"],
        "type": "object",
        "properties": {
          "type": {
            "title": "Type",
            "type": "string",
            "default": "multipoint"
          },
          "coordinates": {
            "title": "Coordinates",
            "type": "array",
            "items": { "type": "array", "items": { "type": "number" } }
          }
        },
        "description": "DTO for location coordinates\n\nReturns:\n    _type_: _description_"
      },
      "Message": {
        "title": "Message",
        "required": ["message"],
        "type": "object",
        "properties": { "message": { "title": "Message", "type": "string" } },
        "description": "Simple message model."
      },
      "OrderBaseDTO": {
        "title": "OrderBaseDTO",
        "required": [
          "order_state",
          "order_items",
          "total_value",
          "fulfilment_type",
          "buyer_details",
          "feedback",
          "notes"
        ],
        "type": "object",
        "properties": {
          "order_state": { "$ref": "#/components/schemas/OrderState" },
          "order_items": {
            "title": "Order Items",
            "type": "array",
            "items": { "$ref": "#/components/schemas/OrderItemDTO" }
          },
          "total_value": { "title": "Total Value", "type": "number" },
          "fulfilment_type": {
            "$ref": "#/components/schemas/seller_client__web__api__order__schema__FulfilmentType"
          },
          "buyer_details": { "$ref": "#/components/schemas/BuyerDetailDTO" },
          "feedback": { "$ref": "#/components/schemas/OrderFeedbackDTO" },
          "notes": { "title": "Notes", "type": "string" }
        },
        "additionalProperties": false
      },
      "OrderFeedbackDTO": {
        "title": "OrderFeedbackDTO",
        "required": ["rating", "review"],
        "type": "object",
        "properties": {
          "rating": { "title": "Rating", "type": "integer" },
          "review": { "title": "Review", "type": "string" }
        },
        "additionalProperties": false
      },
      "OrderItemDTO": {
        "title": "OrderItemDTO",
        "required": [
          "store_front_product_id",
          "quantity",
          "unit_price",
          "total_value"
        ],
        "type": "object",
        "properties": {
          "store_front_product_id": {
            "title": "Store Front Product Id",
            "type": "string"
          },
          "quantity": { "title": "Quantity", "type": "integer" },
          "unit_price": { "title": "Unit Price", "type": "number" },
          "total_value": { "title": "Total Value", "type": "number" }
        },
        "additionalProperties": false
      },
      "OrderOutputDTO": {
        "title": "OrderOutputDTO",
        "required": [
          "order_state",
          "order_items",
          "total_value",
          "fulfilment_type",
          "buyer_details",
          "feedback",
          "notes",
          "order_id"
        ],
        "type": "object",
        "properties": {
          "order_state": { "$ref": "#/components/schemas/OrderState" },
          "order_items": {
            "title": "Order Items",
            "type": "array",
            "items": { "$ref": "#/components/schemas/OrderItemDTO" }
          },
          "total_value": { "title": "Total Value", "type": "number" },
          "fulfilment_type": {
            "$ref": "#/components/schemas/seller_client__web__api__order__schema__FulfilmentType"
          },
          "buyer_details": { "$ref": "#/components/schemas/BuyerDetailDTO" },
          "feedback": { "$ref": "#/components/schemas/OrderFeedbackDTO" },
          "notes": { "title": "Notes", "type": "string" },
          "order_id": { "title": "Order Id", "type": "string" }
        },
        "additionalProperties": false
      },
      "OrderState": {
        "title": "OrderState",
        "enum": [
          "AWAITING BAP CONFIRMED",
          "BAP CONFIRMED",
          "<class 'seller_client.web.api.order.schema.OrderState.Config'>"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "OrderUpdateDTO": {
        "title": "OrderUpdateDTO",
        "type": "array",
        "items": { "$ref": "#/components/schemas/OrderUpdateItemDTO" },
        "additionalProperties": false
      },
      "OrderUpdateItemDTO": {
        "title": "OrderUpdateItemDTO",
        "required": ["order_id", "order_state"],
        "type": "object",
        "properties": {
          "order_id": { "title": "Order Id", "type": "string" },
          "order_state": { "title": "Order State", "type": "string" }
        },
        "additionalProperties": false
      },
      "OrdersUpdateOutputDTO": {
        "title": "OrdersUpdateOutputDTO",
        "required": ["approved", "failed"],
        "type": "object",
        "properties": {
          "approved": { "$ref": "#/components/schemas/ApprovedOrdersDTO" },
          "failed": { "$ref": "#/components/schemas/FailedOrdersDTO" }
        },
        "description": "Output DTO for product.\n\nArgs:\n    BaseModel (_type_): _description_"
      },
      "PendingApprovalProductsDTO": {
        "title": "PendingApprovalProductsDTO",
        "type": "object",
        "properties": {
          "count": { "title": "Count", "type": "integer", "default": 0 },
          "pending_items": {
            "title": "Pending Items",
            "maxLength": 2083,
            "minLength": 1,
            "type": "string",
            "format": "uri"
          }
        },
        "description": "DTO for pending approval products.\n\nArgs:\n    BaseModel (_type_): _description_"
      },
      "PickupDetailsDTO": {
        "title": "PickupDetailsDTO",
        "required": [
          "pickup_name",
          "email",
          "pickup_phone",
          "pickup_pincode",
          "pickup_address",
          "pickup_city",
          "pickup_state",
          "pickup_country"
        ],
        "type": "object",
        "properties": {
          "pickup_name": { "title": "Pickup Name", "type": "string" },
          "email": { "title": "Email", "type": "string", "format": "email" },
          "pickup_phone": {
            "title": "Pickup Phone",
            "pattern": "(\\+91)?(-)?\\s*?(91)?\\s*?(\\d{3})-?\\s*?(\\d{3})-?\\s*?(\\d{4})",
            "type": "string"
          },
          "pickup_pincode": { "title": "Pickup Pincode", "type": "string" },
          "pickup_address": { "title": "Pickup Address", "type": "string" },
          "pickup_city": { "title": "Pickup City", "type": "string" },
          "pickup_state": { "title": "Pickup State", "type": "string" },
          "pickup_country": { "title": "Pickup Country", "type": "string" },
          "pickup_lat": { "title": "Pickup Lat", "type": "string" },
          "pickup_long": { "title": "Pickup Long", "type": "string" }
        },
        "additionalProperties": false,
        "description": "DTO for pickup details.\n\nArgs:\n    BaseModel (_type_): _description_"
      },
      "PolicyDTO": {
        "title": "PolicyDTO",
        "required": ["accept_orders_outside_business_hours"],
        "type": "object",
        "properties": {
          "accept_orders_outside_business_hours": {
            "title": "Accept Orders Outside Business Hours",
            "type": "boolean"
          }
        },
        "additionalProperties": false,
        "description": "DTO for policies.\n\nArgs:\n    BaseModel (_type_): _description_"
      },
      "PrepackagedCommoditiesDTO": {
        "title": "PrepackagedCommoditiesDTO",
        "required": [
          "manufacturer_or_packer_name",
          "manufacturer_or_packer_address",
          "common_or_generic_name_of_commodity",
          "manufacture_or_packing_date",
          "imported_product_country_of_origin"
        ],
        "type": "object",
        "properties": {
          "manufacturer_or_packer_name": {
            "title": "Manufacturer Or Packer Name",
            "type": "string"
          },
          "manufacturer_or_packer_address": {
            "title": "Manufacturer Or Packer Address",
            "type": "string"
          },
          "common_or_generic_name_of_commodity": {
            "title": "Common Or Generic Name Of Commodity",
            "type": "string"
          },
          "manufacture_or_packing_date": {
            "title": "Manufacture Or Packing Date",
            "type": "string"
          },
          "imported_product_country_of_origin": {
            "title": "Imported Product Country Of Origin",
            "type": "string"
          }
        },
        "additionalProperties": false,
        "description": "DTO for pre packaged commodities.\n\nArgs:\n    BaseModel (_type_): _description_"
      },
      "PrepackagedFoodDTO": {
        "title": "PrepackagedFoodDTO",
        "required": [
          "is_vegetarian",
          "ingredients_info",
          "nutritional_info",
          "additives_info",
          "brand_owner_name",
          "brand_owner_address",
          "brand_owner_FSSAI_license_no",
          "other_FSSAI_license_no",
          "importer_name",
          "importer_address",
          "importer_FSSAI_logo",
          "importer_FSSAI_license_no",
          "imported_product_country_of_origin",
          "other_importer_name",
          "other_importer_address",
          "other_premises",
          "other_importer_country_of_origin"
        ],
        "type": "object",
        "properties": {
          "is_vegetarian": { "title": "Is Vegetarian", "type": "boolean" },
          "ingredients_info": { "title": "Ingredients Info", "type": "string" },
          "nutritional_info": { "title": "Nutritional Info", "type": "string" },
          "additives_info": { "title": "Additives Info", "type": "string" },
          "brand_owner_name": { "title": "Brand Owner Name", "type": "string" },
          "brand_owner_address": {
            "title": "Brand Owner Address",
            "type": "string"
          },
          "brand_owner_FSSAI_license_no": {
            "title": "Brand Owner Fssai License No",
            "type": "string"
          },
          "other_FSSAI_license_no": {
            "title": "Other Fssai License No",
            "type": "string"
          },
          "importer_name": { "title": "Importer Name", "type": "string" },
          "importer_address": { "title": "Importer Address", "type": "string" },
          "importer_FSSAI_logo": {
            "title": "Importer Fssai Logo",
            "type": "string"
          },
          "importer_FSSAI_license_no": {
            "title": "Importer Fssai License No",
            "type": "string"
          },
          "imported_product_country_of_origin": {
            "title": "Imported Product Country Of Origin",
            "type": "string"
          },
          "other_importer_name": {
            "title": "Other Importer Name",
            "type": "string"
          },
          "other_importer_address": {
            "title": "Other Importer Address",
            "type": "string"
          },
          "other_premises": { "title": "Other Premises", "type": "string" },
          "other_importer_country_of_origin": {
            "title": "Other Importer Country Of Origin",
            "type": "string"
          }
        },
        "additionalProperties": false,
        "description": "DTO for pre packaged food.\n\nArgs:\n    BaseModel (_type_): _description_"
      },
      "PriceDTO": {
        "title": "PriceDTO",
        "required": [
          "is_selling_price_exclusive_of_gst",
          "max_retail_price",
          "selling_price",
          "total_tax_rate"
        ],
        "type": "object",
        "properties": {
          "is_selling_price_exclusive_of_gst": {
            "title": "Is Selling Price Exclusive Of Gst",
            "type": "boolean"
          },
          "max_retail_price": { "title": "Max Retail Price", "type": "number" },
          "selling_price": { "title": "Selling Price", "type": "number" },
          "sgst_tax_rate": { "title": "Sgst Tax Rate", "type": "number" },
          "cgst_tax_rate": { "title": "Cgst Tax Rate", "type": "number" },
          "igst_tax_rate": { "title": "Igst Tax Rate", "type": "number" },
          "total_tax_rate": { "title": "Total Tax Rate", "type": "number" }
        },
        "additionalProperties": false,
        "description": "DTO for product pricing.\n\nArgs:\n    BaseModel (_type_): _description_"
      },
      "ProductDeleteInputItemDTO": {
        "title": "ProductDeleteInputItemDTO",
        "required": ["catalogue_item_id"],
        "type": "object",
        "properties": {
          "catalogue_item_id": {
            "title": "Catalogue Item Id",
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false,
        "description": "Input DTO for deleting a single product at store front level.\n\nArgs:\n    BaseModel (_type_): _description_"
      },
      "ProductDoesNotExistsErrorDTO": {
        "title": "ProductDoesNotExistsErrorDTO",
        "type": "object",
        "properties": {
          "status": {
            "title": "Status",
            "type": "string",
            "default": "PRODUCT_DOES_NOT_EXISTS_ERROR"
          },
          "success": {
            "title": "Success",
            "type": "boolean",
            "default": false
          },
          "error": {
            "title": "Error",
            "allOf": [{ "$ref": "#/components/schemas/BaseErrorDTO" }],
            "default": { "code": "1005", "message": "Product does not exists." }
          }
        }
      },
      "ProductInventoryInputDTO": {
        "title": "ProductInventoryInputDTO",
        "required": ["quantity"],
        "type": "object",
        "properties": {
          "quantity": { "title": "Quantity", "type": "integer" }
        },
        "additionalProperties": false
      },
      "ProductItemDTO": {
        "title": "ProductItemDTO",
        "required": [
          "catalogue_item_id",
          "sub_categories",
          "catalogue_item_details",
          "inventory",
          "item_policies",
          "serviceability"
        ],
        "type": "object",
        "properties": {
          "catalogue_item_id": {
            "title": "Catalogue Item Id",
            "type": "string",
            "format": "uuid"
          },
          "sub_categories": {
            "title": "Sub Categories",
            "type": "array",
            "items": { "type": "string" }
          },
          "catalogue_item_details": {
            "$ref": "#/components/schemas/CatalogueItemDetailsDTO"
          },
          "inventory": { "$ref": "#/components/schemas/InventoryDTO" },
          "item_policies": { "$ref": "#/components/schemas/ItemPoliciesDTO" },
          "serviceability": {
            "$ref": "#/components/schemas/seller_client__web__api__product__schema__ServiceabilityDTO"
          }
        },
        "additionalProperties": false,
        "description": "DTO for a product item.\n\nArgs:\n    BaseModel (_type_): _description_"
      },
      "ProductsDeleteInputDTO": {
        "title": "ProductsDeleteInputDTO",
        "type": "array",
        "items": { "$ref": "#/components/schemas/ProductDeleteInputItemDTO" },
        "additionalProperties": false,
        "description": "Input DTO for deleting products at store front level.\n\nArgs:\n    BaseModel (_type_): _description_"
      },
      "ProductsInputDTO": {
        "title": "ProductsInputDTO",
        "type": "array",
        "items": { "$ref": "#/components/schemas/ProductItemDTO" },
        "additionalProperties": false,
        "description": "Input DTO for a single product item.\n\nArgs:\n    BaseModel (_type_): _description_"
      },
      "ProductsUploadOutputDTO": {
        "title": "ProductsUploadOutputDTO",
        "required": ["approved", "pending_approval", "failed"],
        "type": "object",
        "properties": {
          "approved": { "$ref": "#/components/schemas/ApprovedProductsDTO" },
          "pending_approval": {
            "$ref": "#/components/schemas/PendingApprovalProductsDTO"
          },
          "failed": { "$ref": "#/components/schemas/FailedProductsDTO" }
        },
        "description": "Output DTO for product.\n\nArgs:\n    BaseModel (_type_): _description_"
      },
      "RedisValueDTO": {
        "title": "RedisValueDTO",
        "required": ["key"],
        "type": "object",
        "properties": {
          "key": { "title": "Key", "type": "string" },
          "value": { "title": "Value", "type": "string" }
        },
        "description": "DTO for redis values."
      },
      "RegisteredAddressDTO": {
        "title": "RegisteredAddressDTO",
        "required": [
          "address_line_1",
          "address_line_2",
          "pincode",
          "city",
          "state"
        ],
        "type": "object",
        "properties": {
          "address_line_1": { "title": "Address Line 1", "type": "string" },
          "address_line_2": { "title": "Address Line 2", "type": "string" },
          "pincode": { "title": "Pincode", "type": "integer" },
          "city": { "title": "City", "type": "string" },
          "state": { "title": "State", "type": "string" }
        },
        "additionalProperties": false,
        "description": "DTO for registered address.\n\nArgs:\n    BaseModel (_type_): _description_"
      },
      "SellerAlreadyExistsErrorDTO": {
        "title": "SellerAlreadyExistsErrorDTO",
        "type": "object",
        "properties": {
          "status": {
            "title": "Status",
            "type": "string",
            "default": "SELLER_ALREADY_EXISTS_ERROR"
          },
          "success": {
            "title": "Success",
            "type": "boolean",
            "default": false
          },
          "error": {
            "title": "Error",
            "allOf": [{ "$ref": "#/components/schemas/BaseErrorDTO" }],
            "default": { "code": "1001", "message": "Seller already exists." }
          }
        }
      },
      "SellerDTO": {
        "title": "SellerDTO",
        "required": [
          "seller_id",
          "name",
          "legal_entity_name",
          "incorporation_type",
          "gst_number",
          "pan_number",
          "categories",
          "bank_account"
        ],
        "type": "object",
        "properties": {
          "seller_id": {
            "title": "Seller Id",
            "type": "string",
            "format": "uuid"
          },
          "setu_seller_id": { "title": "Setu Seller Id", "type": "integer" },
          "name": { "title": "Name", "type": "string" },
          "legal_entity_name": {
            "title": "Legal Entity Name",
            "type": "string"
          },
          "incorporation_type": {
            "$ref": "#/components/schemas/IncorporationType"
          },
          "gst_number": {
            "title": "Gst Number",
            "pattern": "^[0-9]{2}[A-Z]{5}[0-9]{4}[A-Z]{1}[1-9A-Z]{1}Z[0-9A-Z]{1}$",
            "type": "string"
          },
          "pan_number": {
            "title": "Pan Number",
            "pattern": "[A-Z]{5}[0-9]{4}[A-Z]{1}",
            "type": "string"
          },
          "fssai_number": { "title": "Fssai Number", "type": "string" },
          "categories": {
            "title": "Categories",
            "type": "array",
            "items": { "type": "string" }
          },
          "bank_account": {
            "$ref": "#/components/schemas/BankAccountOutputDTO"
          }
        },
        "additionalProperties": false,
        "description": "DTO for seller model.\n\nArgs:\n    BaseModel (_type_): _description_"
      },
      "SellerDoesNotExistsErrorDTO": {
        "title": "SellerDoesNotExistsErrorDTO",
        "type": "object",
        "properties": {
          "status": {
            "title": "Status",
            "type": "string",
            "default": "SELLER_DOES_NOT_EXISTS"
          },
          "success": {
            "title": "Success",
            "type": "boolean",
            "default": false
          },
          "error": {
            "title": "Error",
            "allOf": [{ "$ref": "#/components/schemas/BaseErrorDTO" }],
            "default": { "code": "1002", "message": "Seller does not exists." }
          }
        }
      },
      "SellerInputDTO": {
        "title": "SellerInputDTO",
        "required": [
          "seller_id",
          "name",
          "legal_entity_name",
          "incorporation_type",
          "gst_number",
          "pan_number",
          "categories",
          "bank_account"
        ],
        "type": "object",
        "properties": {
          "seller_id": {
            "title": "Seller Id",
            "type": "string",
            "format": "uuid"
          },
          "name": { "title": "Name", "type": "string" },
          "legal_entity_name": {
            "title": "Legal Entity Name",
            "type": "string"
          },
          "incorporation_type": {
            "$ref": "#/components/schemas/IncorporationType"
          },
          "gst_number": {
            "title": "Gst Number",
            "pattern": "^[0-9]{2}[A-Z]{5}[0-9]{4}[A-Z]{1}[1-9A-Z]{1}Z[0-9A-Z]{1}$",
            "type": "string"
          },
          "pan_number": {
            "title": "Pan Number",
            "pattern": "[A-Z]{5}[0-9]{4}[A-Z]{1}",
            "type": "string"
          },
          "fssai_number": { "title": "Fssai Number", "type": "string" },
          "categories": {
            "title": "Categories",
            "type": "array",
            "items": { "type": "string" }
          },
          "bank_account": { "$ref": "#/components/schemas/BankAccountInputDTO" }
        },
        "additionalProperties": false,
        "description": "Input DTO for seller model.\n\nArgs:\n    BaseModel (_type_): _description_"
      },
      "SellerMinifiedOutputDTO": {
        "title": "SellerMinifiedOutputDTO",
        "type": "object",
        "properties": {
          "setu_seller_id": { "title": "Setu Seller Id", "type": "integer" }
        },
        "description": "DTO for seller output\n\nArgs:\n    BaseModel (_type_): _description_"
      },
      "ServiceabilityCatalogueDTO": {
        "title": "ServiceabilityCatalogueDTO",
        "type": "object",
        "properties": {
          "radius": { "title": "Radius", "type": "integer" },
          "pincodes": {
            "title": "Pincodes",
            "type": "array",
            "items": { "type": "integer" }
          },
          "location_coordinates": {
            "$ref": "#/components/schemas/LocationCoordinatesDTO"
          }
        },
        "additionalProperties": false,
        "description": "DTO for serviceability.\n\nArgs:\n    BaseModel (_type_): _description_"
      },
      "StoreFrontAlreadyExistsErrorDTO": {
        "title": "StoreFrontAlreadyExistsErrorDTO",
        "type": "object",
        "properties": {
          "status": {
            "title": "Status",
            "type": "string",
            "default": "STOREFRONT_ALREADY_EXISTS_ERROR"
          },
          "success": {
            "title": "Success",
            "type": "boolean",
            "default": false
          },
          "error": {
            "title": "Error",
            "allOf": [{ "$ref": "#/components/schemas/BaseErrorDTO" }],
            "default": {
              "code": "1003",
              "message": "Storefront already exists."
            }
          }
        }
      },
      "StoreFrontCatalogueDTO": {
        "title": "StoreFrontCatalogueDTO",
        "required": [
          "name",
          "categories",
          "short_desc",
          "long_desc",
          "pickup_details"
        ],
        "type": "object",
        "properties": {
          "name": { "title": "Name", "type": "string" },
          "categories": {
            "title": "Categories",
            "type": "array",
            "items": { "type": "string" }
          },
          "short_desc": { "title": "Short Desc", "type": "string" },
          "long_desc": { "title": "Long Desc", "type": "string" },
          "images": {
            "title": "Images",
            "type": "array",
            "items": { "type": "string" },
            "default": []
          },
          "pickup_details": { "$ref": "#/components/schemas/PickupDetailsDTO" },
          "ttl": { "title": "Ttl", "type": "string", "default": "PT1H" }
        },
        "additionalProperties": false
      },
      "StoreFrontInputDTO": {
        "title": "StoreFrontInputDTO",
        "required": [
          "storefront_id",
          "setu_seller_id",
          "name",
          "categories",
          "pickup_details",
          "billing_details",
          "business_hours",
          "fulfilment",
          "serviceability",
          "policies"
        ],
        "type": "object",
        "properties": {
          "storefront_id": {
            "title": "Storefront Id",
            "type": "string",
            "format": "uuid"
          },
          "setu_seller_id": { "title": "Setu Seller Id", "type": "integer" },
          "name": { "title": "Name", "type": "string" },
          "categories": {
            "title": "Categories",
            "type": "array",
            "items": { "type": "string" }
          },
          "pickup_details": { "$ref": "#/components/schemas/PickupDetailsDTO" },
          "billing_details": {
            "$ref": "#/components/schemas/BillingDetailsDTO"
          },
          "business_hours": { "$ref": "#/components/schemas/BusinessHoursDTO" },
          "fulfilment": {
            "$ref": "#/components/schemas/seller_client__web__api__storefront__schema__FulfilmentType"
          },
          "serviceability": {
            "$ref": "#/components/schemas/seller_client__web__api__storefront__schema__ServiceabilityDTO"
          },
          "policies": { "$ref": "#/components/schemas/PolicyDTO" }
        },
        "additionalProperties": false,
        "description": "Input DTO for store front\n\nArgs:\n    BaseModel (_type_): _description_"
      },
      "StoreFrontMinifiedOutputDTO": {
        "title": "StoreFrontMinifiedOutputDTO",
        "required": ["setu_storefront_id"],
        "type": "object",
        "properties": {
          "setu_storefront_id": {
            "title": "Setu Storefront Id",
            "type": "integer"
          }
        },
        "description": "Output DTO for store front\n\nArgs:\n    BaseModel (_type_): _description_"
      },
      "StoreFrontOutputDTO": {
        "title": "StoreFrontOutputDTO",
        "required": [
          "setu_storefront_id",
          "storefront_id",
          "setu_seller_id",
          "name",
          "categories",
          "pickup_details",
          "billing_details",
          "business_hours",
          "fulfilment",
          "serviceability",
          "policies"
        ],
        "type": "object",
        "properties": {
          "setu_storefront_id": {
            "title": "Setu Storefront Id",
            "type": "integer"
          },
          "storefront_id": {
            "title": "Storefront Id",
            "type": "string",
            "format": "uuid"
          },
          "setu_seller_id": { "title": "Setu Seller Id", "type": "integer" },
          "name": { "title": "Name", "type": "string" },
          "categories": {
            "title": "Categories",
            "type": "array",
            "items": { "type": "string" }
          },
          "pickup_details": { "$ref": "#/components/schemas/PickupDetailsDTO" },
          "billing_details": {
            "$ref": "#/components/schemas/BillingDetailsDTO"
          },
          "business_hours": { "$ref": "#/components/schemas/BusinessHoursDTO" },
          "status": {
            "allOf": [{ "$ref": "#/components/schemas/StoreFrontStatus" }],
            "default": "LIVE"
          },
          "fulfilment": {
            "$ref": "#/components/schemas/seller_client__web__api__storefront__schema__FulfilmentType"
          },
          "serviceability": {
            "$ref": "#/components/schemas/seller_client__web__api__storefront__schema__ServiceabilityDTO"
          },
          "rating": { "title": "Rating", "type": "number", "default": 0.0 },
          "policies": { "$ref": "#/components/schemas/PolicyDTO" }
        },
        "additionalProperties": false,
        "description": "Output DTO for store front\n\nArgs:\n    BaseModel (_type_): _description_"
      },
      "StoreFrontStatus": {
        "title": "StoreFrontStatus",
        "enum": [
          "LIVE",
          "OFFLINE",
          "<class 'seller_client.web.api.storefront.schema.StoreFrontStatus.Config'>"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "StoreFrontUpdateDTO": {
        "title": "StoreFrontUpdateDTO",
        "required": [
          "name",
          "categories",
          "pickup_details",
          "billing_details",
          "business_hours",
          "fulfilment",
          "serviceability",
          "policies"
        ],
        "type": "object",
        "properties": {
          "name": { "title": "Name", "type": "string" },
          "categories": {
            "title": "Categories",
            "type": "array",
            "items": { "type": "string" }
          },
          "pickup_details": { "$ref": "#/components/schemas/PickupDetailsDTO" },
          "billing_details": {
            "$ref": "#/components/schemas/BillingDetailsDTO"
          },
          "business_hours": { "$ref": "#/components/schemas/BusinessHoursDTO" },
          "fulfilment": {
            "$ref": "#/components/schemas/seller_client__web__api__storefront__schema__FulfilmentType"
          },
          "serviceability": {
            "$ref": "#/components/schemas/seller_client__web__api__storefront__schema__ServiceabilityDTO"
          },
          "policies": { "$ref": "#/components/schemas/PolicyDTO" }
        },
        "additionalProperties": false,
        "description": "Update DTO for store front\n\nArgs:\n    BaseModel (_type_): _description_"
      },
      "SubcategorySpecificRequirementsDTO": {
        "title": "SubcategorySpecificRequirementsDTO",
        "type": "object",
        "properties": {
          "prepackaged_commodities": {
            "$ref": "#/components/schemas/PrepackagedCommoditiesDTO"
          },
          "prepackaged_food": {
            "$ref": "#/components/schemas/PrepackagedFoodDTO"
          },
          "food_beverages": { "$ref": "#/components/schemas/FBDTO" }
        },
        "additionalProperties": false,
        "description": "DTO for subcategory requirements.\n\nArgs:\n    BaseModel (_type_): _description_"
      },
      "TimeToShipDTO": {
        "title": "TimeToShipDTO",
        "required": ["days", "hours", "seconds"],
        "type": "object",
        "properties": {
          "days": { "title": "Days", "type": "integer" },
          "hours": { "title": "Hours", "type": "integer" },
          "seconds": { "title": "Seconds", "type": "integer" }
        },
        "additionalProperties": false
      },
      "UnitDenomination": {
        "title": "UnitDenomination",
        "enum": [
          "BG",
          "LT",
          "BF",
          "LY",
          "BL",
          "M",
          "BT",
          "MG",
          "BX",
          "ML",
          "C",
          "MM",
          "CC",
          "MN",
          "CF",
          "MO",
          "CI",
          "MR",
          "CL",
          "MT",
          "CM",
          "OG",
          "CN",
          "OZ",
          "CS",
          "PA",
          "CT",
          "PC",
          "CW",
          "PG",
          "CY",
          "PK",
          "DI",
          "PL",
          "DR",
          "PR",
          "DW",
          "PT",
          "DY",
          "QR",
          "DZ",
          "QT",
          "EA",
          "RD",
          "FT",
          "RL",
          "GL",
          "RM",
          "GM",
          "SF",
          "GN",
          "SH",
          "GR",
          "ST",
          "HR",
          "SY",
          "IN",
          "TB",
          "JR",
          "TR",
          "KG",
          "UT",
          "KT",
          "VL",
          "WK",
          "LB",
          "YD",
          "LF",
          "YR",
          "LG",
          "LI",
          "<class 'seller_client.web.api.product.schema.UnitDenomination.Config'>"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "ValidationError": {
        "title": "ValidationError",
        "required": ["loc", "msg", "type"],
        "type": "object",
        "properties": {
          "loc": {
            "title": "Location",
            "type": "array",
            "items": { "anyOf": [{ "type": "string" }, { "type": "integer" }] }
          },
          "msg": { "title": "Message", "type": "string" },
          "type": { "title": "Error Type", "type": "string" }
        }
      },
      "seller_client__web__api__order__schema__FulfilmentType": {
        "title": "FulfilmentType",
        "enum": [
          "SELF",
          "<class 'seller_client.web.api.order.schema.FulfilmentType.Config'>"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "seller_client__web__api__product__schema__ServiceabilityDTO": {
        "title": "ServiceabilityDTO",
        "type": "object",
        "properties": {
          "radius": { "title": "Radius", "type": "integer" },
          "pincodes": {
            "title": "Pincodes",
            "type": "array",
            "items": { "type": "integer" }
          }
        },
        "additionalProperties": false,
        "description": "DTO for serviceability.\n\nArgs:\n    BaseModel (_type_): _description_"
      },
      "seller_client__web__api__product__schema__StoreFrontDoesNotExistsErrorDTO": {
        "title": "StoreFrontDoesNotExistsErrorDTO",
        "type": "object",
        "properties": {
          "status": {
            "title": "Status",
            "type": "string",
            "default": "STOREFRONT_DOES_NOT_EXISTS_ERROR"
          },
          "success": {
            "title": "Success",
            "type": "boolean",
            "default": false
          },
          "error": {
            "title": "Error",
            "allOf": [{ "$ref": "#/components/schemas/BaseErrorDTO" }],
            "default": {
              "code": "1004",
              "message": "Storefront already exists."
            }
          }
        }
      },
      "seller_client__web__api__storefront__schema__FulfilmentType": {
        "title": "FulfilmentType",
        "enum": [
          "SELF_SHIP",
          "<class 'seller_client.web.api.storefront.schema.FulfilmentType.Config'>"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "seller_client__web__api__storefront__schema__ServiceabilityDTO": {
        "title": "ServiceabilityDTO",
        "type": "object",
        "properties": {
          "radius": { "title": "Radius", "type": "integer" },
          "pincodes": {
            "title": "Pincodes",
            "type": "array",
            "items": { "type": "integer" }
          }
        },
        "additionalProperties": false,
        "description": "DTO for serviceability.\n\nArgs:\n    BaseModel (_type_): _description_"
      },
      "seller_client__web__api__storefront__schema__StoreFrontDoesNotExistsErrorDTO": {
        "title": "StoreFrontDoesNotExistsErrorDTO",
        "type": "object",
        "properties": {
          "status": {
            "title": "Status",
            "type": "string",
            "default": "STOREFRONT_DOES_NOT_EXISTS_ERROR"
          },
          "success": {
            "title": "Success",
            "type": "boolean",
            "default": false
          },
          "error": {
            "title": "Error",
            "allOf": [{ "$ref": "#/components/schemas/BaseErrorDTO" }],
            "default": {
              "code": "1004",
              "message": "Storefront already exists."
            }
          }
        }
      }
    }
  }
}
